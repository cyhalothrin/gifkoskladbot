package extractor

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/cyhalothrin/gifkoskladbot/favchannel/extractor.extractorClient -o ./favchannel/extractor/extractor_client_mock_test.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Arman92/go-tdlib"
	"github.com/gojuno/minimock/v3"
)

// ExtractorClientMock implements extractorClient
type ExtractorClientMock struct {
	t minimock.Tester

	funcGetChatHistoryRemote          func(chatID int64, fromMessageID int64, offset int32, limit int32) (mp1 *tdlib.Messages, err error)
	inspectFuncGetChatHistoryRemote   func(chatID int64, fromMessageID int64, offset int32, limit int32)
	afterGetChatHistoryRemoteCounter  uint64
	beforeGetChatHistoryRemoteCounter uint64
	GetChatHistoryRemoteMock          mExtractorClientMockGetChatHistoryRemote

	funcGetFavChannelID          func() (i1 int64, err error)
	inspectFuncGetFavChannelID   func()
	afterGetFavChannelIDCounter  uint64
	beforeGetFavChannelIDCounter uint64
	GetFavChannelIDMock          mExtractorClientMockGetFavChannelID
}

// NewExtractorClientMock returns a mock for extractorClient
func NewExtractorClientMock(t minimock.Tester) *ExtractorClientMock {
	m := &ExtractorClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetChatHistoryRemoteMock = mExtractorClientMockGetChatHistoryRemote{mock: m}
	m.GetChatHistoryRemoteMock.callArgs = []*ExtractorClientMockGetChatHistoryRemoteParams{}

	m.GetFavChannelIDMock = mExtractorClientMockGetFavChannelID{mock: m}

	return m
}

type mExtractorClientMockGetChatHistoryRemote struct {
	mock               *ExtractorClientMock
	defaultExpectation *ExtractorClientMockGetChatHistoryRemoteExpectation
	expectations       []*ExtractorClientMockGetChatHistoryRemoteExpectation

	callArgs []*ExtractorClientMockGetChatHistoryRemoteParams
	mutex    sync.RWMutex
}

// ExtractorClientMockGetChatHistoryRemoteExpectation specifies expectation struct of the extractorClient.GetChatHistoryRemote
type ExtractorClientMockGetChatHistoryRemoteExpectation struct {
	mock    *ExtractorClientMock
	params  *ExtractorClientMockGetChatHistoryRemoteParams
	results *ExtractorClientMockGetChatHistoryRemoteResults
	Counter uint64
}

// ExtractorClientMockGetChatHistoryRemoteParams contains parameters of the extractorClient.GetChatHistoryRemote
type ExtractorClientMockGetChatHistoryRemoteParams struct {
	chatID        int64
	fromMessageID int64
	offset        int32
	limit         int32
}

// ExtractorClientMockGetChatHistoryRemoteResults contains results of the extractorClient.GetChatHistoryRemote
type ExtractorClientMockGetChatHistoryRemoteResults struct {
	mp1 *tdlib.Messages
	err error
}

// Expect sets up expected params for extractorClient.GetChatHistoryRemote
func (mmGetChatHistoryRemote *mExtractorClientMockGetChatHistoryRemote) Expect(chatID int64, fromMessageID int64, offset int32, limit int32) *mExtractorClientMockGetChatHistoryRemote {
	if mmGetChatHistoryRemote.mock.funcGetChatHistoryRemote != nil {
		mmGetChatHistoryRemote.mock.t.Fatalf("ExtractorClientMock.GetChatHistoryRemote mock is already set by Set")
	}

	if mmGetChatHistoryRemote.defaultExpectation == nil {
		mmGetChatHistoryRemote.defaultExpectation = &ExtractorClientMockGetChatHistoryRemoteExpectation{}
	}

	mmGetChatHistoryRemote.defaultExpectation.params = &ExtractorClientMockGetChatHistoryRemoteParams{chatID, fromMessageID, offset, limit}
	for _, e := range mmGetChatHistoryRemote.expectations {
		if minimock.Equal(e.params, mmGetChatHistoryRemote.defaultExpectation.params) {
			mmGetChatHistoryRemote.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChatHistoryRemote.defaultExpectation.params)
		}
	}

	return mmGetChatHistoryRemote
}

// Inspect accepts an inspector function that has same arguments as the extractorClient.GetChatHistoryRemote
func (mmGetChatHistoryRemote *mExtractorClientMockGetChatHistoryRemote) Inspect(f func(chatID int64, fromMessageID int64, offset int32, limit int32)) *mExtractorClientMockGetChatHistoryRemote {
	if mmGetChatHistoryRemote.mock.inspectFuncGetChatHistoryRemote != nil {
		mmGetChatHistoryRemote.mock.t.Fatalf("Inspect function is already set for ExtractorClientMock.GetChatHistoryRemote")
	}

	mmGetChatHistoryRemote.mock.inspectFuncGetChatHistoryRemote = f

	return mmGetChatHistoryRemote
}

// Return sets up results that will be returned by extractorClient.GetChatHistoryRemote
func (mmGetChatHistoryRemote *mExtractorClientMockGetChatHistoryRemote) Return(mp1 *tdlib.Messages, err error) *ExtractorClientMock {
	if mmGetChatHistoryRemote.mock.funcGetChatHistoryRemote != nil {
		mmGetChatHistoryRemote.mock.t.Fatalf("ExtractorClientMock.GetChatHistoryRemote mock is already set by Set")
	}

	if mmGetChatHistoryRemote.defaultExpectation == nil {
		mmGetChatHistoryRemote.defaultExpectation = &ExtractorClientMockGetChatHistoryRemoteExpectation{mock: mmGetChatHistoryRemote.mock}
	}
	mmGetChatHistoryRemote.defaultExpectation.results = &ExtractorClientMockGetChatHistoryRemoteResults{mp1, err}
	return mmGetChatHistoryRemote.mock
}

//Set uses given function f to mock the extractorClient.GetChatHistoryRemote method
func (mmGetChatHistoryRemote *mExtractorClientMockGetChatHistoryRemote) Set(f func(chatID int64, fromMessageID int64, offset int32, limit int32) (mp1 *tdlib.Messages, err error)) *ExtractorClientMock {
	if mmGetChatHistoryRemote.defaultExpectation != nil {
		mmGetChatHistoryRemote.mock.t.Fatalf("Default expectation is already set for the extractorClient.GetChatHistoryRemote method")
	}

	if len(mmGetChatHistoryRemote.expectations) > 0 {
		mmGetChatHistoryRemote.mock.t.Fatalf("Some expectations are already set for the extractorClient.GetChatHistoryRemote method")
	}

	mmGetChatHistoryRemote.mock.funcGetChatHistoryRemote = f
	return mmGetChatHistoryRemote.mock
}

// When sets expectation for the extractorClient.GetChatHistoryRemote which will trigger the result defined by the following
// Then helper
func (mmGetChatHistoryRemote *mExtractorClientMockGetChatHistoryRemote) When(chatID int64, fromMessageID int64, offset int32, limit int32) *ExtractorClientMockGetChatHistoryRemoteExpectation {
	if mmGetChatHistoryRemote.mock.funcGetChatHistoryRemote != nil {
		mmGetChatHistoryRemote.mock.t.Fatalf("ExtractorClientMock.GetChatHistoryRemote mock is already set by Set")
	}

	expectation := &ExtractorClientMockGetChatHistoryRemoteExpectation{
		mock:   mmGetChatHistoryRemote.mock,
		params: &ExtractorClientMockGetChatHistoryRemoteParams{chatID, fromMessageID, offset, limit},
	}
	mmGetChatHistoryRemote.expectations = append(mmGetChatHistoryRemote.expectations, expectation)
	return expectation
}

// Then sets up extractorClient.GetChatHistoryRemote return parameters for the expectation previously defined by the When method
func (e *ExtractorClientMockGetChatHistoryRemoteExpectation) Then(mp1 *tdlib.Messages, err error) *ExtractorClientMock {
	e.results = &ExtractorClientMockGetChatHistoryRemoteResults{mp1, err}
	return e.mock
}

// GetChatHistoryRemote implements extractorClient
func (mmGetChatHistoryRemote *ExtractorClientMock) GetChatHistoryRemote(chatID int64, fromMessageID int64, offset int32, limit int32) (mp1 *tdlib.Messages, err error) {
	mm_atomic.AddUint64(&mmGetChatHistoryRemote.beforeGetChatHistoryRemoteCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChatHistoryRemote.afterGetChatHistoryRemoteCounter, 1)

	if mmGetChatHistoryRemote.inspectFuncGetChatHistoryRemote != nil {
		mmGetChatHistoryRemote.inspectFuncGetChatHistoryRemote(chatID, fromMessageID, offset, limit)
	}

	mm_params := &ExtractorClientMockGetChatHistoryRemoteParams{chatID, fromMessageID, offset, limit}

	// Record call args
	mmGetChatHistoryRemote.GetChatHistoryRemoteMock.mutex.Lock()
	mmGetChatHistoryRemote.GetChatHistoryRemoteMock.callArgs = append(mmGetChatHistoryRemote.GetChatHistoryRemoteMock.callArgs, mm_params)
	mmGetChatHistoryRemote.GetChatHistoryRemoteMock.mutex.Unlock()

	for _, e := range mmGetChatHistoryRemote.GetChatHistoryRemoteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1, e.results.err
		}
	}

	if mmGetChatHistoryRemote.GetChatHistoryRemoteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChatHistoryRemote.GetChatHistoryRemoteMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChatHistoryRemote.GetChatHistoryRemoteMock.defaultExpectation.params
		mm_got := ExtractorClientMockGetChatHistoryRemoteParams{chatID, fromMessageID, offset, limit}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChatHistoryRemote.t.Errorf("ExtractorClientMock.GetChatHistoryRemote got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChatHistoryRemote.GetChatHistoryRemoteMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChatHistoryRemote.t.Fatal("No results are set for the ExtractorClientMock.GetChatHistoryRemote")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmGetChatHistoryRemote.funcGetChatHistoryRemote != nil {
		return mmGetChatHistoryRemote.funcGetChatHistoryRemote(chatID, fromMessageID, offset, limit)
	}
	mmGetChatHistoryRemote.t.Fatalf("Unexpected call to ExtractorClientMock.GetChatHistoryRemote. %v %v %v %v", chatID, fromMessageID, offset, limit)
	return
}

// GetChatHistoryRemoteAfterCounter returns a count of finished ExtractorClientMock.GetChatHistoryRemote invocations
func (mmGetChatHistoryRemote *ExtractorClientMock) GetChatHistoryRemoteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatHistoryRemote.afterGetChatHistoryRemoteCounter)
}

// GetChatHistoryRemoteBeforeCounter returns a count of ExtractorClientMock.GetChatHistoryRemote invocations
func (mmGetChatHistoryRemote *ExtractorClientMock) GetChatHistoryRemoteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatHistoryRemote.beforeGetChatHistoryRemoteCounter)
}

// Calls returns a list of arguments used in each call to ExtractorClientMock.GetChatHistoryRemote.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChatHistoryRemote *mExtractorClientMockGetChatHistoryRemote) Calls() []*ExtractorClientMockGetChatHistoryRemoteParams {
	mmGetChatHistoryRemote.mutex.RLock()

	argCopy := make([]*ExtractorClientMockGetChatHistoryRemoteParams, len(mmGetChatHistoryRemote.callArgs))
	copy(argCopy, mmGetChatHistoryRemote.callArgs)

	mmGetChatHistoryRemote.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatHistoryRemoteDone returns true if the count of the GetChatHistoryRemote invocations corresponds
// the number of defined expectations
func (m *ExtractorClientMock) MinimockGetChatHistoryRemoteDone() bool {
	for _, e := range m.GetChatHistoryRemoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatHistoryRemoteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatHistoryRemoteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatHistoryRemote != nil && mm_atomic.LoadUint64(&m.afterGetChatHistoryRemoteCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetChatHistoryRemoteInspect logs each unmet expectation
func (m *ExtractorClientMock) MinimockGetChatHistoryRemoteInspect() {
	for _, e := range m.GetChatHistoryRemoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ExtractorClientMock.GetChatHistoryRemote with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatHistoryRemoteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatHistoryRemoteCounter) < 1 {
		if m.GetChatHistoryRemoteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ExtractorClientMock.GetChatHistoryRemote")
		} else {
			m.t.Errorf("Expected call to ExtractorClientMock.GetChatHistoryRemote with params: %#v", *m.GetChatHistoryRemoteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatHistoryRemote != nil && mm_atomic.LoadUint64(&m.afterGetChatHistoryRemoteCounter) < 1 {
		m.t.Error("Expected call to ExtractorClientMock.GetChatHistoryRemote")
	}
}

type mExtractorClientMockGetFavChannelID struct {
	mock               *ExtractorClientMock
	defaultExpectation *ExtractorClientMockGetFavChannelIDExpectation
	expectations       []*ExtractorClientMockGetFavChannelIDExpectation
}

// ExtractorClientMockGetFavChannelIDExpectation specifies expectation struct of the extractorClient.GetFavChannelID
type ExtractorClientMockGetFavChannelIDExpectation struct {
	mock *ExtractorClientMock

	results *ExtractorClientMockGetFavChannelIDResults
	Counter uint64
}

// ExtractorClientMockGetFavChannelIDResults contains results of the extractorClient.GetFavChannelID
type ExtractorClientMockGetFavChannelIDResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for extractorClient.GetFavChannelID
func (mmGetFavChannelID *mExtractorClientMockGetFavChannelID) Expect() *mExtractorClientMockGetFavChannelID {
	if mmGetFavChannelID.mock.funcGetFavChannelID != nil {
		mmGetFavChannelID.mock.t.Fatalf("ExtractorClientMock.GetFavChannelID mock is already set by Set")
	}

	if mmGetFavChannelID.defaultExpectation == nil {
		mmGetFavChannelID.defaultExpectation = &ExtractorClientMockGetFavChannelIDExpectation{}
	}

	return mmGetFavChannelID
}

// Inspect accepts an inspector function that has same arguments as the extractorClient.GetFavChannelID
func (mmGetFavChannelID *mExtractorClientMockGetFavChannelID) Inspect(f func()) *mExtractorClientMockGetFavChannelID {
	if mmGetFavChannelID.mock.inspectFuncGetFavChannelID != nil {
		mmGetFavChannelID.mock.t.Fatalf("Inspect function is already set for ExtractorClientMock.GetFavChannelID")
	}

	mmGetFavChannelID.mock.inspectFuncGetFavChannelID = f

	return mmGetFavChannelID
}

// Return sets up results that will be returned by extractorClient.GetFavChannelID
func (mmGetFavChannelID *mExtractorClientMockGetFavChannelID) Return(i1 int64, err error) *ExtractorClientMock {
	if mmGetFavChannelID.mock.funcGetFavChannelID != nil {
		mmGetFavChannelID.mock.t.Fatalf("ExtractorClientMock.GetFavChannelID mock is already set by Set")
	}

	if mmGetFavChannelID.defaultExpectation == nil {
		mmGetFavChannelID.defaultExpectation = &ExtractorClientMockGetFavChannelIDExpectation{mock: mmGetFavChannelID.mock}
	}
	mmGetFavChannelID.defaultExpectation.results = &ExtractorClientMockGetFavChannelIDResults{i1, err}
	return mmGetFavChannelID.mock
}

//Set uses given function f to mock the extractorClient.GetFavChannelID method
func (mmGetFavChannelID *mExtractorClientMockGetFavChannelID) Set(f func() (i1 int64, err error)) *ExtractorClientMock {
	if mmGetFavChannelID.defaultExpectation != nil {
		mmGetFavChannelID.mock.t.Fatalf("Default expectation is already set for the extractorClient.GetFavChannelID method")
	}

	if len(mmGetFavChannelID.expectations) > 0 {
		mmGetFavChannelID.mock.t.Fatalf("Some expectations are already set for the extractorClient.GetFavChannelID method")
	}

	mmGetFavChannelID.mock.funcGetFavChannelID = f
	return mmGetFavChannelID.mock
}

// GetFavChannelID implements extractorClient
func (mmGetFavChannelID *ExtractorClientMock) GetFavChannelID() (i1 int64, err error) {
	mm_atomic.AddUint64(&mmGetFavChannelID.beforeGetFavChannelIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetFavChannelID.afterGetFavChannelIDCounter, 1)

	if mmGetFavChannelID.inspectFuncGetFavChannelID != nil {
		mmGetFavChannelID.inspectFuncGetFavChannelID()
	}

	if mmGetFavChannelID.GetFavChannelIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetFavChannelID.GetFavChannelIDMock.defaultExpectation.Counter, 1)

		mm_results := mmGetFavChannelID.GetFavChannelIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetFavChannelID.t.Fatal("No results are set for the ExtractorClientMock.GetFavChannelID")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmGetFavChannelID.funcGetFavChannelID != nil {
		return mmGetFavChannelID.funcGetFavChannelID()
	}
	mmGetFavChannelID.t.Fatalf("Unexpected call to ExtractorClientMock.GetFavChannelID.")
	return
}

// GetFavChannelIDAfterCounter returns a count of finished ExtractorClientMock.GetFavChannelID invocations
func (mmGetFavChannelID *ExtractorClientMock) GetFavChannelIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFavChannelID.afterGetFavChannelIDCounter)
}

// GetFavChannelIDBeforeCounter returns a count of ExtractorClientMock.GetFavChannelID invocations
func (mmGetFavChannelID *ExtractorClientMock) GetFavChannelIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetFavChannelID.beforeGetFavChannelIDCounter)
}

// MinimockGetFavChannelIDDone returns true if the count of the GetFavChannelID invocations corresponds
// the number of defined expectations
func (m *ExtractorClientMock) MinimockGetFavChannelIDDone() bool {
	for _, e := range m.GetFavChannelIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetFavChannelIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetFavChannelIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFavChannelID != nil && mm_atomic.LoadUint64(&m.afterGetFavChannelIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetFavChannelIDInspect logs each unmet expectation
func (m *ExtractorClientMock) MinimockGetFavChannelIDInspect() {
	for _, e := range m.GetFavChannelIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ExtractorClientMock.GetFavChannelID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetFavChannelIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetFavChannelIDCounter) < 1 {
		m.t.Error("Expected call to ExtractorClientMock.GetFavChannelID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetFavChannelID != nil && mm_atomic.LoadUint64(&m.afterGetFavChannelIDCounter) < 1 {
		m.t.Error("Expected call to ExtractorClientMock.GetFavChannelID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ExtractorClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetChatHistoryRemoteInspect()

		m.MinimockGetFavChannelIDInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ExtractorClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ExtractorClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetChatHistoryRemoteDone() &&
		m.MinimockGetFavChannelIDDone()
}
