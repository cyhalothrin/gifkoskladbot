package bot

// Code generated by http://github.com/gojuno/minimock (3.0.8). DO NOT EDIT.

//go:generate minimock -i github.com/cyhalothrin/gifkoskladbot/bot.alerter -o ./bot\alerter_mock_test.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// AlerterMock implements alerter
type AlerterMock struct {
	t minimock.Tester

	funcSend          func(e1 error) (err error)
	inspectFuncSend   func(e1 error)
	afterSendCounter  uint64
	beforeSendCounter uint64
	SendMock          mAlerterMockSend
}

// NewAlerterMock returns a mock for alerter
func NewAlerterMock(t minimock.Tester) *AlerterMock {
	m := &AlerterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendMock = mAlerterMockSend{mock: m}
	m.SendMock.callArgs = []*AlerterMockSendParams{}

	return m
}

type mAlerterMockSend struct {
	mock               *AlerterMock
	defaultExpectation *AlerterMockSendExpectation
	expectations       []*AlerterMockSendExpectation

	callArgs []*AlerterMockSendParams
	mutex    sync.RWMutex
}

// AlerterMockSendExpectation specifies expectation struct of the alerter.Send
type AlerterMockSendExpectation struct {
	mock    *AlerterMock
	params  *AlerterMockSendParams
	results *AlerterMockSendResults
	Counter uint64
}

// AlerterMockSendParams contains parameters of the alerter.Send
type AlerterMockSendParams struct {
	e1 error
}

// AlerterMockSendResults contains results of the alerter.Send
type AlerterMockSendResults struct {
	err error
}

// Expect sets up expected params for alerter.Send
func (mmSend *mAlerterMockSend) Expect(e1 error) *mAlerterMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("AlerterMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &AlerterMockSendExpectation{}
	}

	mmSend.defaultExpectation.params = &AlerterMockSendParams{e1}
	for _, e := range mmSend.expectations {
		if minimock.Equal(e.params, mmSend.defaultExpectation.params) {
			mmSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSend.defaultExpectation.params)
		}
	}

	return mmSend
}

// Inspect accepts an inspector function that has same arguments as the alerter.Send
func (mmSend *mAlerterMockSend) Inspect(f func(e1 error)) *mAlerterMockSend {
	if mmSend.mock.inspectFuncSend != nil {
		mmSend.mock.t.Fatalf("Inspect function is already set for AlerterMock.Send")
	}

	mmSend.mock.inspectFuncSend = f

	return mmSend
}

// Return sets up results that will be returned by alerter.Send
func (mmSend *mAlerterMockSend) Return(err error) *AlerterMock {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("AlerterMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &AlerterMockSendExpectation{mock: mmSend.mock}
	}
	mmSend.defaultExpectation.results = &AlerterMockSendResults{err}
	return mmSend.mock
}

//Set uses given function f to mock the alerter.Send method
func (mmSend *mAlerterMockSend) Set(f func(e1 error) (err error)) *AlerterMock {
	if mmSend.defaultExpectation != nil {
		mmSend.mock.t.Fatalf("Default expectation is already set for the alerter.Send method")
	}

	if len(mmSend.expectations) > 0 {
		mmSend.mock.t.Fatalf("Some expectations are already set for the alerter.Send method")
	}

	mmSend.mock.funcSend = f
	return mmSend.mock
}

// When sets expectation for the alerter.Send which will trigger the result defined by the following
// Then helper
func (mmSend *mAlerterMockSend) When(e1 error) *AlerterMockSendExpectation {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("AlerterMock.Send mock is already set by Set")
	}

	expectation := &AlerterMockSendExpectation{
		mock:   mmSend.mock,
		params: &AlerterMockSendParams{e1},
	}
	mmSend.expectations = append(mmSend.expectations, expectation)
	return expectation
}

// Then sets up alerter.Send return parameters for the expectation previously defined by the When method
func (e *AlerterMockSendExpectation) Then(err error) *AlerterMock {
	e.results = &AlerterMockSendResults{err}
	return e.mock
}

// Send implements alerter
func (mmSend *AlerterMock) Send(e1 error) (err error) {
	mm_atomic.AddUint64(&mmSend.beforeSendCounter, 1)
	defer mm_atomic.AddUint64(&mmSend.afterSendCounter, 1)

	if mmSend.inspectFuncSend != nil {
		mmSend.inspectFuncSend(e1)
	}

	mm_params := &AlerterMockSendParams{e1}

	// Record call args
	mmSend.SendMock.mutex.Lock()
	mmSend.SendMock.callArgs = append(mmSend.SendMock.callArgs, mm_params)
	mmSend.SendMock.mutex.Unlock()

	for _, e := range mmSend.SendMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSend.SendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSend.SendMock.defaultExpectation.Counter, 1)
		mm_want := mmSend.SendMock.defaultExpectation.params
		mm_got := AlerterMockSendParams{e1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSend.t.Errorf("AlerterMock.Send got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSend.SendMock.defaultExpectation.results
		if mm_results == nil {
			mmSend.t.Fatal("No results are set for the AlerterMock.Send")
		}
		return (*mm_results).err
	}
	if mmSend.funcSend != nil {
		return mmSend.funcSend(e1)
	}
	mmSend.t.Fatalf("Unexpected call to AlerterMock.Send. %v", e1)
	return
}

// SendAfterCounter returns a count of finished AlerterMock.Send invocations
func (mmSend *AlerterMock) SendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.afterSendCounter)
}

// SendBeforeCounter returns a count of AlerterMock.Send invocations
func (mmSend *AlerterMock) SendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.beforeSendCounter)
}

// Calls returns a list of arguments used in each call to AlerterMock.Send.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSend *mAlerterMockSend) Calls() []*AlerterMockSendParams {
	mmSend.mutex.RLock()

	argCopy := make([]*AlerterMockSendParams, len(mmSend.callArgs))
	copy(argCopy, mmSend.callArgs)

	mmSend.mutex.RUnlock()

	return argCopy
}

// MinimockSendDone returns true if the count of the Send invocations corresponds
// the number of defined expectations
func (m *AlerterMock) MinimockSendDone() bool {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendInspect logs each unmet expectation
func (m *AlerterMock) MinimockSendInspect() {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AlerterMock.Send with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		if m.SendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AlerterMock.Send")
		} else {
			m.t.Errorf("Expected call to AlerterMock.Send with params: %#v", *m.SendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		m.t.Error("Expected call to AlerterMock.Send")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AlerterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSendInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AlerterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AlerterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendDone()
}
