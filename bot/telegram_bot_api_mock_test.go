package bot

// Code generated by http://github.com/gojuno/minimock (3.0.8). DO NOT EDIT.

//go:generate minimock -i github.com/cyhalothrin/gifkoskladbot/bot.telegramBotAPI -o ./bot\telegram_bot_api_mock_test.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/gojuno/minimock/v3"
)

// TelegramBotAPIMock implements telegramBotAPI
type TelegramBotAPIMock struct {
	t minimock.Tester

	funcEditMessage          func(chatID int64, messageID int, text string) (err error)
	inspectFuncEditMessage   func(chatID int64, messageID int, text string)
	afterEditMessageCounter  uint64
	beforeEditMessageCounter uint64
	EditMessageMock          mTelegramBotAPIMockEditMessage

	funcGetChatPinnedMessageID          func(chatID int64) (i1 int, err error)
	inspectFuncGetChatPinnedMessageID   func(chatID int64)
	afterGetChatPinnedMessageIDCounter  uint64
	beforeGetChatPinnedMessageIDCounter uint64
	GetChatPinnedMessageIDMock          mTelegramBotAPIMockGetChatPinnedMessageID

	funcGetUpdates          func() (ua1 []tgbotapi.Update, err error)
	inspectFuncGetUpdates   func()
	afterGetUpdatesCounter  uint64
	beforeGetUpdatesCounter uint64
	GetUpdatesMock          mTelegramBotAPIMockGetUpdates

	funcPinMessage          func(chatID int64, messageID int) (err error)
	inspectFuncPinMessage   func(chatID int64, messageID int)
	afterPinMessageCounter  uint64
	beforePinMessageCounter uint64
	PinMessageMock          mTelegramBotAPIMockPinMessage

	funcSendAnimation          func(chatID int64, fileID string, caption string) (i1 int, err error)
	inspectFuncSendAnimation   func(chatID int64, fileID string, caption string)
	afterSendAnimationCounter  uint64
	beforeSendAnimationCounter uint64
	SendAnimationMock          mTelegramBotAPIMockSendAnimation

	funcSendMessage          func(chatID int64, text string) (i1 int, err error)
	inspectFuncSendMessage   func(chatID int64, text string)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mTelegramBotAPIMockSendMessage
}

// NewTelegramBotAPIMock returns a mock for telegramBotAPI
func NewTelegramBotAPIMock(t minimock.Tester) *TelegramBotAPIMock {
	m := &TelegramBotAPIMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.EditMessageMock = mTelegramBotAPIMockEditMessage{mock: m}
	m.EditMessageMock.callArgs = []*TelegramBotAPIMockEditMessageParams{}

	m.GetChatPinnedMessageIDMock = mTelegramBotAPIMockGetChatPinnedMessageID{mock: m}
	m.GetChatPinnedMessageIDMock.callArgs = []*TelegramBotAPIMockGetChatPinnedMessageIDParams{}

	m.GetUpdatesMock = mTelegramBotAPIMockGetUpdates{mock: m}

	m.PinMessageMock = mTelegramBotAPIMockPinMessage{mock: m}
	m.PinMessageMock.callArgs = []*TelegramBotAPIMockPinMessageParams{}

	m.SendAnimationMock = mTelegramBotAPIMockSendAnimation{mock: m}
	m.SendAnimationMock.callArgs = []*TelegramBotAPIMockSendAnimationParams{}

	m.SendMessageMock = mTelegramBotAPIMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*TelegramBotAPIMockSendMessageParams{}

	return m
}

type mTelegramBotAPIMockEditMessage struct {
	mock               *TelegramBotAPIMock
	defaultExpectation *TelegramBotAPIMockEditMessageExpectation
	expectations       []*TelegramBotAPIMockEditMessageExpectation

	callArgs []*TelegramBotAPIMockEditMessageParams
	mutex    sync.RWMutex
}

// TelegramBotAPIMockEditMessageExpectation specifies expectation struct of the telegramBotAPI.EditMessage
type TelegramBotAPIMockEditMessageExpectation struct {
	mock    *TelegramBotAPIMock
	params  *TelegramBotAPIMockEditMessageParams
	results *TelegramBotAPIMockEditMessageResults
	Counter uint64
}

// TelegramBotAPIMockEditMessageParams contains parameters of the telegramBotAPI.EditMessage
type TelegramBotAPIMockEditMessageParams struct {
	chatID    int64
	messageID int
	text      string
}

// TelegramBotAPIMockEditMessageResults contains results of the telegramBotAPI.EditMessage
type TelegramBotAPIMockEditMessageResults struct {
	err error
}

// Expect sets up expected params for telegramBotAPI.EditMessage
func (mmEditMessage *mTelegramBotAPIMockEditMessage) Expect(chatID int64, messageID int, text string) *mTelegramBotAPIMockEditMessage {
	if mmEditMessage.mock.funcEditMessage != nil {
		mmEditMessage.mock.t.Fatalf("TelegramBotAPIMock.EditMessage mock is already set by Set")
	}

	if mmEditMessage.defaultExpectation == nil {
		mmEditMessage.defaultExpectation = &TelegramBotAPIMockEditMessageExpectation{}
	}

	mmEditMessage.defaultExpectation.params = &TelegramBotAPIMockEditMessageParams{chatID, messageID, text}
	for _, e := range mmEditMessage.expectations {
		if minimock.Equal(e.params, mmEditMessage.defaultExpectation.params) {
			mmEditMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmEditMessage.defaultExpectation.params)
		}
	}

	return mmEditMessage
}

// Inspect accepts an inspector function that has same arguments as the telegramBotAPI.EditMessage
func (mmEditMessage *mTelegramBotAPIMockEditMessage) Inspect(f func(chatID int64, messageID int, text string)) *mTelegramBotAPIMockEditMessage {
	if mmEditMessage.mock.inspectFuncEditMessage != nil {
		mmEditMessage.mock.t.Fatalf("Inspect function is already set for TelegramBotAPIMock.EditMessage")
	}

	mmEditMessage.mock.inspectFuncEditMessage = f

	return mmEditMessage
}

// Return sets up results that will be returned by telegramBotAPI.EditMessage
func (mmEditMessage *mTelegramBotAPIMockEditMessage) Return(err error) *TelegramBotAPIMock {
	if mmEditMessage.mock.funcEditMessage != nil {
		mmEditMessage.mock.t.Fatalf("TelegramBotAPIMock.EditMessage mock is already set by Set")
	}

	if mmEditMessage.defaultExpectation == nil {
		mmEditMessage.defaultExpectation = &TelegramBotAPIMockEditMessageExpectation{mock: mmEditMessage.mock}
	}
	mmEditMessage.defaultExpectation.results = &TelegramBotAPIMockEditMessageResults{err}
	return mmEditMessage.mock
}

//Set uses given function f to mock the telegramBotAPI.EditMessage method
func (mmEditMessage *mTelegramBotAPIMockEditMessage) Set(f func(chatID int64, messageID int, text string) (err error)) *TelegramBotAPIMock {
	if mmEditMessage.defaultExpectation != nil {
		mmEditMessage.mock.t.Fatalf("Default expectation is already set for the telegramBotAPI.EditMessage method")
	}

	if len(mmEditMessage.expectations) > 0 {
		mmEditMessage.mock.t.Fatalf("Some expectations are already set for the telegramBotAPI.EditMessage method")
	}

	mmEditMessage.mock.funcEditMessage = f
	return mmEditMessage.mock
}

// When sets expectation for the telegramBotAPI.EditMessage which will trigger the result defined by the following
// Then helper
func (mmEditMessage *mTelegramBotAPIMockEditMessage) When(chatID int64, messageID int, text string) *TelegramBotAPIMockEditMessageExpectation {
	if mmEditMessage.mock.funcEditMessage != nil {
		mmEditMessage.mock.t.Fatalf("TelegramBotAPIMock.EditMessage mock is already set by Set")
	}

	expectation := &TelegramBotAPIMockEditMessageExpectation{
		mock:   mmEditMessage.mock,
		params: &TelegramBotAPIMockEditMessageParams{chatID, messageID, text},
	}
	mmEditMessage.expectations = append(mmEditMessage.expectations, expectation)
	return expectation
}

// Then sets up telegramBotAPI.EditMessage return parameters for the expectation previously defined by the When method
func (e *TelegramBotAPIMockEditMessageExpectation) Then(err error) *TelegramBotAPIMock {
	e.results = &TelegramBotAPIMockEditMessageResults{err}
	return e.mock
}

// EditMessage implements telegramBotAPI
func (mmEditMessage *TelegramBotAPIMock) EditMessage(chatID int64, messageID int, text string) (err error) {
	mm_atomic.AddUint64(&mmEditMessage.beforeEditMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmEditMessage.afterEditMessageCounter, 1)

	if mmEditMessage.inspectFuncEditMessage != nil {
		mmEditMessage.inspectFuncEditMessage(chatID, messageID, text)
	}

	mm_params := &TelegramBotAPIMockEditMessageParams{chatID, messageID, text}

	// Record call args
	mmEditMessage.EditMessageMock.mutex.Lock()
	mmEditMessage.EditMessageMock.callArgs = append(mmEditMessage.EditMessageMock.callArgs, mm_params)
	mmEditMessage.EditMessageMock.mutex.Unlock()

	for _, e := range mmEditMessage.EditMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmEditMessage.EditMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmEditMessage.EditMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmEditMessage.EditMessageMock.defaultExpectation.params
		mm_got := TelegramBotAPIMockEditMessageParams{chatID, messageID, text}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmEditMessage.t.Errorf("TelegramBotAPIMock.EditMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmEditMessage.EditMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmEditMessage.t.Fatal("No results are set for the TelegramBotAPIMock.EditMessage")
		}
		return (*mm_results).err
	}
	if mmEditMessage.funcEditMessage != nil {
		return mmEditMessage.funcEditMessage(chatID, messageID, text)
	}
	mmEditMessage.t.Fatalf("Unexpected call to TelegramBotAPIMock.EditMessage. %v %v %v", chatID, messageID, text)
	return
}

// EditMessageAfterCounter returns a count of finished TelegramBotAPIMock.EditMessage invocations
func (mmEditMessage *TelegramBotAPIMock) EditMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEditMessage.afterEditMessageCounter)
}

// EditMessageBeforeCounter returns a count of TelegramBotAPIMock.EditMessage invocations
func (mmEditMessage *TelegramBotAPIMock) EditMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEditMessage.beforeEditMessageCounter)
}

// Calls returns a list of arguments used in each call to TelegramBotAPIMock.EditMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmEditMessage *mTelegramBotAPIMockEditMessage) Calls() []*TelegramBotAPIMockEditMessageParams {
	mmEditMessage.mutex.RLock()

	argCopy := make([]*TelegramBotAPIMockEditMessageParams, len(mmEditMessage.callArgs))
	copy(argCopy, mmEditMessage.callArgs)

	mmEditMessage.mutex.RUnlock()

	return argCopy
}

// MinimockEditMessageDone returns true if the count of the EditMessage invocations corresponds
// the number of defined expectations
func (m *TelegramBotAPIMock) MinimockEditMessageDone() bool {
	for _, e := range m.EditMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EditMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEditMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEditMessage != nil && mm_atomic.LoadUint64(&m.afterEditMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockEditMessageInspect logs each unmet expectation
func (m *TelegramBotAPIMock) MinimockEditMessageInspect() {
	for _, e := range m.EditMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TelegramBotAPIMock.EditMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EditMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEditMessageCounter) < 1 {
		if m.EditMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TelegramBotAPIMock.EditMessage")
		} else {
			m.t.Errorf("Expected call to TelegramBotAPIMock.EditMessage with params: %#v", *m.EditMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEditMessage != nil && mm_atomic.LoadUint64(&m.afterEditMessageCounter) < 1 {
		m.t.Error("Expected call to TelegramBotAPIMock.EditMessage")
	}
}

type mTelegramBotAPIMockGetChatPinnedMessageID struct {
	mock               *TelegramBotAPIMock
	defaultExpectation *TelegramBotAPIMockGetChatPinnedMessageIDExpectation
	expectations       []*TelegramBotAPIMockGetChatPinnedMessageIDExpectation

	callArgs []*TelegramBotAPIMockGetChatPinnedMessageIDParams
	mutex    sync.RWMutex
}

// TelegramBotAPIMockGetChatPinnedMessageIDExpectation specifies expectation struct of the telegramBotAPI.GetChatPinnedMessageID
type TelegramBotAPIMockGetChatPinnedMessageIDExpectation struct {
	mock    *TelegramBotAPIMock
	params  *TelegramBotAPIMockGetChatPinnedMessageIDParams
	results *TelegramBotAPIMockGetChatPinnedMessageIDResults
	Counter uint64
}

// TelegramBotAPIMockGetChatPinnedMessageIDParams contains parameters of the telegramBotAPI.GetChatPinnedMessageID
type TelegramBotAPIMockGetChatPinnedMessageIDParams struct {
	chatID int64
}

// TelegramBotAPIMockGetChatPinnedMessageIDResults contains results of the telegramBotAPI.GetChatPinnedMessageID
type TelegramBotAPIMockGetChatPinnedMessageIDResults struct {
	i1  int
	err error
}

// Expect sets up expected params for telegramBotAPI.GetChatPinnedMessageID
func (mmGetChatPinnedMessageID *mTelegramBotAPIMockGetChatPinnedMessageID) Expect(chatID int64) *mTelegramBotAPIMockGetChatPinnedMessageID {
	if mmGetChatPinnedMessageID.mock.funcGetChatPinnedMessageID != nil {
		mmGetChatPinnedMessageID.mock.t.Fatalf("TelegramBotAPIMock.GetChatPinnedMessageID mock is already set by Set")
	}

	if mmGetChatPinnedMessageID.defaultExpectation == nil {
		mmGetChatPinnedMessageID.defaultExpectation = &TelegramBotAPIMockGetChatPinnedMessageIDExpectation{}
	}

	mmGetChatPinnedMessageID.defaultExpectation.params = &TelegramBotAPIMockGetChatPinnedMessageIDParams{chatID}
	for _, e := range mmGetChatPinnedMessageID.expectations {
		if minimock.Equal(e.params, mmGetChatPinnedMessageID.defaultExpectation.params) {
			mmGetChatPinnedMessageID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChatPinnedMessageID.defaultExpectation.params)
		}
	}

	return mmGetChatPinnedMessageID
}

// Inspect accepts an inspector function that has same arguments as the telegramBotAPI.GetChatPinnedMessageID
func (mmGetChatPinnedMessageID *mTelegramBotAPIMockGetChatPinnedMessageID) Inspect(f func(chatID int64)) *mTelegramBotAPIMockGetChatPinnedMessageID {
	if mmGetChatPinnedMessageID.mock.inspectFuncGetChatPinnedMessageID != nil {
		mmGetChatPinnedMessageID.mock.t.Fatalf("Inspect function is already set for TelegramBotAPIMock.GetChatPinnedMessageID")
	}

	mmGetChatPinnedMessageID.mock.inspectFuncGetChatPinnedMessageID = f

	return mmGetChatPinnedMessageID
}

// Return sets up results that will be returned by telegramBotAPI.GetChatPinnedMessageID
func (mmGetChatPinnedMessageID *mTelegramBotAPIMockGetChatPinnedMessageID) Return(i1 int, err error) *TelegramBotAPIMock {
	if mmGetChatPinnedMessageID.mock.funcGetChatPinnedMessageID != nil {
		mmGetChatPinnedMessageID.mock.t.Fatalf("TelegramBotAPIMock.GetChatPinnedMessageID mock is already set by Set")
	}

	if mmGetChatPinnedMessageID.defaultExpectation == nil {
		mmGetChatPinnedMessageID.defaultExpectation = &TelegramBotAPIMockGetChatPinnedMessageIDExpectation{mock: mmGetChatPinnedMessageID.mock}
	}
	mmGetChatPinnedMessageID.defaultExpectation.results = &TelegramBotAPIMockGetChatPinnedMessageIDResults{i1, err}
	return mmGetChatPinnedMessageID.mock
}

//Set uses given function f to mock the telegramBotAPI.GetChatPinnedMessageID method
func (mmGetChatPinnedMessageID *mTelegramBotAPIMockGetChatPinnedMessageID) Set(f func(chatID int64) (i1 int, err error)) *TelegramBotAPIMock {
	if mmGetChatPinnedMessageID.defaultExpectation != nil {
		mmGetChatPinnedMessageID.mock.t.Fatalf("Default expectation is already set for the telegramBotAPI.GetChatPinnedMessageID method")
	}

	if len(mmGetChatPinnedMessageID.expectations) > 0 {
		mmGetChatPinnedMessageID.mock.t.Fatalf("Some expectations are already set for the telegramBotAPI.GetChatPinnedMessageID method")
	}

	mmGetChatPinnedMessageID.mock.funcGetChatPinnedMessageID = f
	return mmGetChatPinnedMessageID.mock
}

// When sets expectation for the telegramBotAPI.GetChatPinnedMessageID which will trigger the result defined by the following
// Then helper
func (mmGetChatPinnedMessageID *mTelegramBotAPIMockGetChatPinnedMessageID) When(chatID int64) *TelegramBotAPIMockGetChatPinnedMessageIDExpectation {
	if mmGetChatPinnedMessageID.mock.funcGetChatPinnedMessageID != nil {
		mmGetChatPinnedMessageID.mock.t.Fatalf("TelegramBotAPIMock.GetChatPinnedMessageID mock is already set by Set")
	}

	expectation := &TelegramBotAPIMockGetChatPinnedMessageIDExpectation{
		mock:   mmGetChatPinnedMessageID.mock,
		params: &TelegramBotAPIMockGetChatPinnedMessageIDParams{chatID},
	}
	mmGetChatPinnedMessageID.expectations = append(mmGetChatPinnedMessageID.expectations, expectation)
	return expectation
}

// Then sets up telegramBotAPI.GetChatPinnedMessageID return parameters for the expectation previously defined by the When method
func (e *TelegramBotAPIMockGetChatPinnedMessageIDExpectation) Then(i1 int, err error) *TelegramBotAPIMock {
	e.results = &TelegramBotAPIMockGetChatPinnedMessageIDResults{i1, err}
	return e.mock
}

// GetChatPinnedMessageID implements telegramBotAPI
func (mmGetChatPinnedMessageID *TelegramBotAPIMock) GetChatPinnedMessageID(chatID int64) (i1 int, err error) {
	mm_atomic.AddUint64(&mmGetChatPinnedMessageID.beforeGetChatPinnedMessageIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChatPinnedMessageID.afterGetChatPinnedMessageIDCounter, 1)

	if mmGetChatPinnedMessageID.inspectFuncGetChatPinnedMessageID != nil {
		mmGetChatPinnedMessageID.inspectFuncGetChatPinnedMessageID(chatID)
	}

	mm_params := &TelegramBotAPIMockGetChatPinnedMessageIDParams{chatID}

	// Record call args
	mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.mutex.Lock()
	mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.callArgs = append(mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.callArgs, mm_params)
	mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.mutex.Unlock()

	for _, e := range mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.defaultExpectation.params
		mm_got := TelegramBotAPIMockGetChatPinnedMessageIDParams{chatID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChatPinnedMessageID.t.Errorf("TelegramBotAPIMock.GetChatPinnedMessageID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChatPinnedMessageID.GetChatPinnedMessageIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChatPinnedMessageID.t.Fatal("No results are set for the TelegramBotAPIMock.GetChatPinnedMessageID")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmGetChatPinnedMessageID.funcGetChatPinnedMessageID != nil {
		return mmGetChatPinnedMessageID.funcGetChatPinnedMessageID(chatID)
	}
	mmGetChatPinnedMessageID.t.Fatalf("Unexpected call to TelegramBotAPIMock.GetChatPinnedMessageID. %v", chatID)
	return
}

// GetChatPinnedMessageIDAfterCounter returns a count of finished TelegramBotAPIMock.GetChatPinnedMessageID invocations
func (mmGetChatPinnedMessageID *TelegramBotAPIMock) GetChatPinnedMessageIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatPinnedMessageID.afterGetChatPinnedMessageIDCounter)
}

// GetChatPinnedMessageIDBeforeCounter returns a count of TelegramBotAPIMock.GetChatPinnedMessageID invocations
func (mmGetChatPinnedMessageID *TelegramBotAPIMock) GetChatPinnedMessageIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatPinnedMessageID.beforeGetChatPinnedMessageIDCounter)
}

// Calls returns a list of arguments used in each call to TelegramBotAPIMock.GetChatPinnedMessageID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChatPinnedMessageID *mTelegramBotAPIMockGetChatPinnedMessageID) Calls() []*TelegramBotAPIMockGetChatPinnedMessageIDParams {
	mmGetChatPinnedMessageID.mutex.RLock()

	argCopy := make([]*TelegramBotAPIMockGetChatPinnedMessageIDParams, len(mmGetChatPinnedMessageID.callArgs))
	copy(argCopy, mmGetChatPinnedMessageID.callArgs)

	mmGetChatPinnedMessageID.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatPinnedMessageIDDone returns true if the count of the GetChatPinnedMessageID invocations corresponds
// the number of defined expectations
func (m *TelegramBotAPIMock) MinimockGetChatPinnedMessageIDDone() bool {
	for _, e := range m.GetChatPinnedMessageIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatPinnedMessageIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatPinnedMessageIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatPinnedMessageID != nil && mm_atomic.LoadUint64(&m.afterGetChatPinnedMessageIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetChatPinnedMessageIDInspect logs each unmet expectation
func (m *TelegramBotAPIMock) MinimockGetChatPinnedMessageIDInspect() {
	for _, e := range m.GetChatPinnedMessageIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TelegramBotAPIMock.GetChatPinnedMessageID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatPinnedMessageIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatPinnedMessageIDCounter) < 1 {
		if m.GetChatPinnedMessageIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TelegramBotAPIMock.GetChatPinnedMessageID")
		} else {
			m.t.Errorf("Expected call to TelegramBotAPIMock.GetChatPinnedMessageID with params: %#v", *m.GetChatPinnedMessageIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatPinnedMessageID != nil && mm_atomic.LoadUint64(&m.afterGetChatPinnedMessageIDCounter) < 1 {
		m.t.Error("Expected call to TelegramBotAPIMock.GetChatPinnedMessageID")
	}
}

type mTelegramBotAPIMockGetUpdates struct {
	mock               *TelegramBotAPIMock
	defaultExpectation *TelegramBotAPIMockGetUpdatesExpectation
	expectations       []*TelegramBotAPIMockGetUpdatesExpectation
}

// TelegramBotAPIMockGetUpdatesExpectation specifies expectation struct of the telegramBotAPI.GetUpdates
type TelegramBotAPIMockGetUpdatesExpectation struct {
	mock *TelegramBotAPIMock

	results *TelegramBotAPIMockGetUpdatesResults
	Counter uint64
}

// TelegramBotAPIMockGetUpdatesResults contains results of the telegramBotAPI.GetUpdates
type TelegramBotAPIMockGetUpdatesResults struct {
	ua1 []tgbotapi.Update
	err error
}

// Expect sets up expected params for telegramBotAPI.GetUpdates
func (mmGetUpdates *mTelegramBotAPIMockGetUpdates) Expect() *mTelegramBotAPIMockGetUpdates {
	if mmGetUpdates.mock.funcGetUpdates != nil {
		mmGetUpdates.mock.t.Fatalf("TelegramBotAPIMock.GetUpdates mock is already set by Set")
	}

	if mmGetUpdates.defaultExpectation == nil {
		mmGetUpdates.defaultExpectation = &TelegramBotAPIMockGetUpdatesExpectation{}
	}

	return mmGetUpdates
}

// Inspect accepts an inspector function that has same arguments as the telegramBotAPI.GetUpdates
func (mmGetUpdates *mTelegramBotAPIMockGetUpdates) Inspect(f func()) *mTelegramBotAPIMockGetUpdates {
	if mmGetUpdates.mock.inspectFuncGetUpdates != nil {
		mmGetUpdates.mock.t.Fatalf("Inspect function is already set for TelegramBotAPIMock.GetUpdates")
	}

	mmGetUpdates.mock.inspectFuncGetUpdates = f

	return mmGetUpdates
}

// Return sets up results that will be returned by telegramBotAPI.GetUpdates
func (mmGetUpdates *mTelegramBotAPIMockGetUpdates) Return(ua1 []tgbotapi.Update, err error) *TelegramBotAPIMock {
	if mmGetUpdates.mock.funcGetUpdates != nil {
		mmGetUpdates.mock.t.Fatalf("TelegramBotAPIMock.GetUpdates mock is already set by Set")
	}

	if mmGetUpdates.defaultExpectation == nil {
		mmGetUpdates.defaultExpectation = &TelegramBotAPIMockGetUpdatesExpectation{mock: mmGetUpdates.mock}
	}
	mmGetUpdates.defaultExpectation.results = &TelegramBotAPIMockGetUpdatesResults{ua1, err}
	return mmGetUpdates.mock
}

//Set uses given function f to mock the telegramBotAPI.GetUpdates method
func (mmGetUpdates *mTelegramBotAPIMockGetUpdates) Set(f func() (ua1 []tgbotapi.Update, err error)) *TelegramBotAPIMock {
	if mmGetUpdates.defaultExpectation != nil {
		mmGetUpdates.mock.t.Fatalf("Default expectation is already set for the telegramBotAPI.GetUpdates method")
	}

	if len(mmGetUpdates.expectations) > 0 {
		mmGetUpdates.mock.t.Fatalf("Some expectations are already set for the telegramBotAPI.GetUpdates method")
	}

	mmGetUpdates.mock.funcGetUpdates = f
	return mmGetUpdates.mock
}

// GetUpdates implements telegramBotAPI
func (mmGetUpdates *TelegramBotAPIMock) GetUpdates() (ua1 []tgbotapi.Update, err error) {
	mm_atomic.AddUint64(&mmGetUpdates.beforeGetUpdatesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUpdates.afterGetUpdatesCounter, 1)

	if mmGetUpdates.inspectFuncGetUpdates != nil {
		mmGetUpdates.inspectFuncGetUpdates()
	}

	if mmGetUpdates.GetUpdatesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUpdates.GetUpdatesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetUpdates.GetUpdatesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUpdates.t.Fatal("No results are set for the TelegramBotAPIMock.GetUpdates")
		}
		return (*mm_results).ua1, (*mm_results).err
	}
	if mmGetUpdates.funcGetUpdates != nil {
		return mmGetUpdates.funcGetUpdates()
	}
	mmGetUpdates.t.Fatalf("Unexpected call to TelegramBotAPIMock.GetUpdates.")
	return
}

// GetUpdatesAfterCounter returns a count of finished TelegramBotAPIMock.GetUpdates invocations
func (mmGetUpdates *TelegramBotAPIMock) GetUpdatesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUpdates.afterGetUpdatesCounter)
}

// GetUpdatesBeforeCounter returns a count of TelegramBotAPIMock.GetUpdates invocations
func (mmGetUpdates *TelegramBotAPIMock) GetUpdatesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUpdates.beforeGetUpdatesCounter)
}

// MinimockGetUpdatesDone returns true if the count of the GetUpdates invocations corresponds
// the number of defined expectations
func (m *TelegramBotAPIMock) MinimockGetUpdatesDone() bool {
	for _, e := range m.GetUpdatesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUpdatesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUpdatesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUpdates != nil && mm_atomic.LoadUint64(&m.afterGetUpdatesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetUpdatesInspect logs each unmet expectation
func (m *TelegramBotAPIMock) MinimockGetUpdatesInspect() {
	for _, e := range m.GetUpdatesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TelegramBotAPIMock.GetUpdates")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUpdatesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUpdatesCounter) < 1 {
		m.t.Error("Expected call to TelegramBotAPIMock.GetUpdates")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUpdates != nil && mm_atomic.LoadUint64(&m.afterGetUpdatesCounter) < 1 {
		m.t.Error("Expected call to TelegramBotAPIMock.GetUpdates")
	}
}

type mTelegramBotAPIMockPinMessage struct {
	mock               *TelegramBotAPIMock
	defaultExpectation *TelegramBotAPIMockPinMessageExpectation
	expectations       []*TelegramBotAPIMockPinMessageExpectation

	callArgs []*TelegramBotAPIMockPinMessageParams
	mutex    sync.RWMutex
}

// TelegramBotAPIMockPinMessageExpectation specifies expectation struct of the telegramBotAPI.PinMessage
type TelegramBotAPIMockPinMessageExpectation struct {
	mock    *TelegramBotAPIMock
	params  *TelegramBotAPIMockPinMessageParams
	results *TelegramBotAPIMockPinMessageResults
	Counter uint64
}

// TelegramBotAPIMockPinMessageParams contains parameters of the telegramBotAPI.PinMessage
type TelegramBotAPIMockPinMessageParams struct {
	chatID    int64
	messageID int
}

// TelegramBotAPIMockPinMessageResults contains results of the telegramBotAPI.PinMessage
type TelegramBotAPIMockPinMessageResults struct {
	err error
}

// Expect sets up expected params for telegramBotAPI.PinMessage
func (mmPinMessage *mTelegramBotAPIMockPinMessage) Expect(chatID int64, messageID int) *mTelegramBotAPIMockPinMessage {
	if mmPinMessage.mock.funcPinMessage != nil {
		mmPinMessage.mock.t.Fatalf("TelegramBotAPIMock.PinMessage mock is already set by Set")
	}

	if mmPinMessage.defaultExpectation == nil {
		mmPinMessage.defaultExpectation = &TelegramBotAPIMockPinMessageExpectation{}
	}

	mmPinMessage.defaultExpectation.params = &TelegramBotAPIMockPinMessageParams{chatID, messageID}
	for _, e := range mmPinMessage.expectations {
		if minimock.Equal(e.params, mmPinMessage.defaultExpectation.params) {
			mmPinMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPinMessage.defaultExpectation.params)
		}
	}

	return mmPinMessage
}

// Inspect accepts an inspector function that has same arguments as the telegramBotAPI.PinMessage
func (mmPinMessage *mTelegramBotAPIMockPinMessage) Inspect(f func(chatID int64, messageID int)) *mTelegramBotAPIMockPinMessage {
	if mmPinMessage.mock.inspectFuncPinMessage != nil {
		mmPinMessage.mock.t.Fatalf("Inspect function is already set for TelegramBotAPIMock.PinMessage")
	}

	mmPinMessage.mock.inspectFuncPinMessage = f

	return mmPinMessage
}

// Return sets up results that will be returned by telegramBotAPI.PinMessage
func (mmPinMessage *mTelegramBotAPIMockPinMessage) Return(err error) *TelegramBotAPIMock {
	if mmPinMessage.mock.funcPinMessage != nil {
		mmPinMessage.mock.t.Fatalf("TelegramBotAPIMock.PinMessage mock is already set by Set")
	}

	if mmPinMessage.defaultExpectation == nil {
		mmPinMessage.defaultExpectation = &TelegramBotAPIMockPinMessageExpectation{mock: mmPinMessage.mock}
	}
	mmPinMessage.defaultExpectation.results = &TelegramBotAPIMockPinMessageResults{err}
	return mmPinMessage.mock
}

//Set uses given function f to mock the telegramBotAPI.PinMessage method
func (mmPinMessage *mTelegramBotAPIMockPinMessage) Set(f func(chatID int64, messageID int) (err error)) *TelegramBotAPIMock {
	if mmPinMessage.defaultExpectation != nil {
		mmPinMessage.mock.t.Fatalf("Default expectation is already set for the telegramBotAPI.PinMessage method")
	}

	if len(mmPinMessage.expectations) > 0 {
		mmPinMessage.mock.t.Fatalf("Some expectations are already set for the telegramBotAPI.PinMessage method")
	}

	mmPinMessage.mock.funcPinMessage = f
	return mmPinMessage.mock
}

// When sets expectation for the telegramBotAPI.PinMessage which will trigger the result defined by the following
// Then helper
func (mmPinMessage *mTelegramBotAPIMockPinMessage) When(chatID int64, messageID int) *TelegramBotAPIMockPinMessageExpectation {
	if mmPinMessage.mock.funcPinMessage != nil {
		mmPinMessage.mock.t.Fatalf("TelegramBotAPIMock.PinMessage mock is already set by Set")
	}

	expectation := &TelegramBotAPIMockPinMessageExpectation{
		mock:   mmPinMessage.mock,
		params: &TelegramBotAPIMockPinMessageParams{chatID, messageID},
	}
	mmPinMessage.expectations = append(mmPinMessage.expectations, expectation)
	return expectation
}

// Then sets up telegramBotAPI.PinMessage return parameters for the expectation previously defined by the When method
func (e *TelegramBotAPIMockPinMessageExpectation) Then(err error) *TelegramBotAPIMock {
	e.results = &TelegramBotAPIMockPinMessageResults{err}
	return e.mock
}

// PinMessage implements telegramBotAPI
func (mmPinMessage *TelegramBotAPIMock) PinMessage(chatID int64, messageID int) (err error) {
	mm_atomic.AddUint64(&mmPinMessage.beforePinMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmPinMessage.afterPinMessageCounter, 1)

	if mmPinMessage.inspectFuncPinMessage != nil {
		mmPinMessage.inspectFuncPinMessage(chatID, messageID)
	}

	mm_params := &TelegramBotAPIMockPinMessageParams{chatID, messageID}

	// Record call args
	mmPinMessage.PinMessageMock.mutex.Lock()
	mmPinMessage.PinMessageMock.callArgs = append(mmPinMessage.PinMessageMock.callArgs, mm_params)
	mmPinMessage.PinMessageMock.mutex.Unlock()

	for _, e := range mmPinMessage.PinMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPinMessage.PinMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPinMessage.PinMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmPinMessage.PinMessageMock.defaultExpectation.params
		mm_got := TelegramBotAPIMockPinMessageParams{chatID, messageID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPinMessage.t.Errorf("TelegramBotAPIMock.PinMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPinMessage.PinMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmPinMessage.t.Fatal("No results are set for the TelegramBotAPIMock.PinMessage")
		}
		return (*mm_results).err
	}
	if mmPinMessage.funcPinMessage != nil {
		return mmPinMessage.funcPinMessage(chatID, messageID)
	}
	mmPinMessage.t.Fatalf("Unexpected call to TelegramBotAPIMock.PinMessage. %v %v", chatID, messageID)
	return
}

// PinMessageAfterCounter returns a count of finished TelegramBotAPIMock.PinMessage invocations
func (mmPinMessage *TelegramBotAPIMock) PinMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPinMessage.afterPinMessageCounter)
}

// PinMessageBeforeCounter returns a count of TelegramBotAPIMock.PinMessage invocations
func (mmPinMessage *TelegramBotAPIMock) PinMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPinMessage.beforePinMessageCounter)
}

// Calls returns a list of arguments used in each call to TelegramBotAPIMock.PinMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPinMessage *mTelegramBotAPIMockPinMessage) Calls() []*TelegramBotAPIMockPinMessageParams {
	mmPinMessage.mutex.RLock()

	argCopy := make([]*TelegramBotAPIMockPinMessageParams, len(mmPinMessage.callArgs))
	copy(argCopy, mmPinMessage.callArgs)

	mmPinMessage.mutex.RUnlock()

	return argCopy
}

// MinimockPinMessageDone returns true if the count of the PinMessage invocations corresponds
// the number of defined expectations
func (m *TelegramBotAPIMock) MinimockPinMessageDone() bool {
	for _, e := range m.PinMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PinMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPinMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPinMessage != nil && mm_atomic.LoadUint64(&m.afterPinMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockPinMessageInspect logs each unmet expectation
func (m *TelegramBotAPIMock) MinimockPinMessageInspect() {
	for _, e := range m.PinMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TelegramBotAPIMock.PinMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PinMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPinMessageCounter) < 1 {
		if m.PinMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TelegramBotAPIMock.PinMessage")
		} else {
			m.t.Errorf("Expected call to TelegramBotAPIMock.PinMessage with params: %#v", *m.PinMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPinMessage != nil && mm_atomic.LoadUint64(&m.afterPinMessageCounter) < 1 {
		m.t.Error("Expected call to TelegramBotAPIMock.PinMessage")
	}
}

type mTelegramBotAPIMockSendAnimation struct {
	mock               *TelegramBotAPIMock
	defaultExpectation *TelegramBotAPIMockSendAnimationExpectation
	expectations       []*TelegramBotAPIMockSendAnimationExpectation

	callArgs []*TelegramBotAPIMockSendAnimationParams
	mutex    sync.RWMutex
}

// TelegramBotAPIMockSendAnimationExpectation specifies expectation struct of the telegramBotAPI.SendAnimation
type TelegramBotAPIMockSendAnimationExpectation struct {
	mock    *TelegramBotAPIMock
	params  *TelegramBotAPIMockSendAnimationParams
	results *TelegramBotAPIMockSendAnimationResults
	Counter uint64
}

// TelegramBotAPIMockSendAnimationParams contains parameters of the telegramBotAPI.SendAnimation
type TelegramBotAPIMockSendAnimationParams struct {
	chatID  int64
	fileID  string
	caption string
}

// TelegramBotAPIMockSendAnimationResults contains results of the telegramBotAPI.SendAnimation
type TelegramBotAPIMockSendAnimationResults struct {
	i1  int
	err error
}

// Expect sets up expected params for telegramBotAPI.SendAnimation
func (mmSendAnimation *mTelegramBotAPIMockSendAnimation) Expect(chatID int64, fileID string, caption string) *mTelegramBotAPIMockSendAnimation {
	if mmSendAnimation.mock.funcSendAnimation != nil {
		mmSendAnimation.mock.t.Fatalf("TelegramBotAPIMock.SendAnimation mock is already set by Set")
	}

	if mmSendAnimation.defaultExpectation == nil {
		mmSendAnimation.defaultExpectation = &TelegramBotAPIMockSendAnimationExpectation{}
	}

	mmSendAnimation.defaultExpectation.params = &TelegramBotAPIMockSendAnimationParams{chatID, fileID, caption}
	for _, e := range mmSendAnimation.expectations {
		if minimock.Equal(e.params, mmSendAnimation.defaultExpectation.params) {
			mmSendAnimation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendAnimation.defaultExpectation.params)
		}
	}

	return mmSendAnimation
}

// Inspect accepts an inspector function that has same arguments as the telegramBotAPI.SendAnimation
func (mmSendAnimation *mTelegramBotAPIMockSendAnimation) Inspect(f func(chatID int64, fileID string, caption string)) *mTelegramBotAPIMockSendAnimation {
	if mmSendAnimation.mock.inspectFuncSendAnimation != nil {
		mmSendAnimation.mock.t.Fatalf("Inspect function is already set for TelegramBotAPIMock.SendAnimation")
	}

	mmSendAnimation.mock.inspectFuncSendAnimation = f

	return mmSendAnimation
}

// Return sets up results that will be returned by telegramBotAPI.SendAnimation
func (mmSendAnimation *mTelegramBotAPIMockSendAnimation) Return(i1 int, err error) *TelegramBotAPIMock {
	if mmSendAnimation.mock.funcSendAnimation != nil {
		mmSendAnimation.mock.t.Fatalf("TelegramBotAPIMock.SendAnimation mock is already set by Set")
	}

	if mmSendAnimation.defaultExpectation == nil {
		mmSendAnimation.defaultExpectation = &TelegramBotAPIMockSendAnimationExpectation{mock: mmSendAnimation.mock}
	}
	mmSendAnimation.defaultExpectation.results = &TelegramBotAPIMockSendAnimationResults{i1, err}
	return mmSendAnimation.mock
}

//Set uses given function f to mock the telegramBotAPI.SendAnimation method
func (mmSendAnimation *mTelegramBotAPIMockSendAnimation) Set(f func(chatID int64, fileID string, caption string) (i1 int, err error)) *TelegramBotAPIMock {
	if mmSendAnimation.defaultExpectation != nil {
		mmSendAnimation.mock.t.Fatalf("Default expectation is already set for the telegramBotAPI.SendAnimation method")
	}

	if len(mmSendAnimation.expectations) > 0 {
		mmSendAnimation.mock.t.Fatalf("Some expectations are already set for the telegramBotAPI.SendAnimation method")
	}

	mmSendAnimation.mock.funcSendAnimation = f
	return mmSendAnimation.mock
}

// When sets expectation for the telegramBotAPI.SendAnimation which will trigger the result defined by the following
// Then helper
func (mmSendAnimation *mTelegramBotAPIMockSendAnimation) When(chatID int64, fileID string, caption string) *TelegramBotAPIMockSendAnimationExpectation {
	if mmSendAnimation.mock.funcSendAnimation != nil {
		mmSendAnimation.mock.t.Fatalf("TelegramBotAPIMock.SendAnimation mock is already set by Set")
	}

	expectation := &TelegramBotAPIMockSendAnimationExpectation{
		mock:   mmSendAnimation.mock,
		params: &TelegramBotAPIMockSendAnimationParams{chatID, fileID, caption},
	}
	mmSendAnimation.expectations = append(mmSendAnimation.expectations, expectation)
	return expectation
}

// Then sets up telegramBotAPI.SendAnimation return parameters for the expectation previously defined by the When method
func (e *TelegramBotAPIMockSendAnimationExpectation) Then(i1 int, err error) *TelegramBotAPIMock {
	e.results = &TelegramBotAPIMockSendAnimationResults{i1, err}
	return e.mock
}

// SendAnimation implements telegramBotAPI
func (mmSendAnimation *TelegramBotAPIMock) SendAnimation(chatID int64, fileID string, caption string) (i1 int, err error) {
	mm_atomic.AddUint64(&mmSendAnimation.beforeSendAnimationCounter, 1)
	defer mm_atomic.AddUint64(&mmSendAnimation.afterSendAnimationCounter, 1)

	if mmSendAnimation.inspectFuncSendAnimation != nil {
		mmSendAnimation.inspectFuncSendAnimation(chatID, fileID, caption)
	}

	mm_params := &TelegramBotAPIMockSendAnimationParams{chatID, fileID, caption}

	// Record call args
	mmSendAnimation.SendAnimationMock.mutex.Lock()
	mmSendAnimation.SendAnimationMock.callArgs = append(mmSendAnimation.SendAnimationMock.callArgs, mm_params)
	mmSendAnimation.SendAnimationMock.mutex.Unlock()

	for _, e := range mmSendAnimation.SendAnimationMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmSendAnimation.SendAnimationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendAnimation.SendAnimationMock.defaultExpectation.Counter, 1)
		mm_want := mmSendAnimation.SendAnimationMock.defaultExpectation.params
		mm_got := TelegramBotAPIMockSendAnimationParams{chatID, fileID, caption}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendAnimation.t.Errorf("TelegramBotAPIMock.SendAnimation got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendAnimation.SendAnimationMock.defaultExpectation.results
		if mm_results == nil {
			mmSendAnimation.t.Fatal("No results are set for the TelegramBotAPIMock.SendAnimation")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmSendAnimation.funcSendAnimation != nil {
		return mmSendAnimation.funcSendAnimation(chatID, fileID, caption)
	}
	mmSendAnimation.t.Fatalf("Unexpected call to TelegramBotAPIMock.SendAnimation. %v %v %v", chatID, fileID, caption)
	return
}

// SendAnimationAfterCounter returns a count of finished TelegramBotAPIMock.SendAnimation invocations
func (mmSendAnimation *TelegramBotAPIMock) SendAnimationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendAnimation.afterSendAnimationCounter)
}

// SendAnimationBeforeCounter returns a count of TelegramBotAPIMock.SendAnimation invocations
func (mmSendAnimation *TelegramBotAPIMock) SendAnimationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendAnimation.beforeSendAnimationCounter)
}

// Calls returns a list of arguments used in each call to TelegramBotAPIMock.SendAnimation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendAnimation *mTelegramBotAPIMockSendAnimation) Calls() []*TelegramBotAPIMockSendAnimationParams {
	mmSendAnimation.mutex.RLock()

	argCopy := make([]*TelegramBotAPIMockSendAnimationParams, len(mmSendAnimation.callArgs))
	copy(argCopy, mmSendAnimation.callArgs)

	mmSendAnimation.mutex.RUnlock()

	return argCopy
}

// MinimockSendAnimationDone returns true if the count of the SendAnimation invocations corresponds
// the number of defined expectations
func (m *TelegramBotAPIMock) MinimockSendAnimationDone() bool {
	for _, e := range m.SendAnimationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendAnimationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendAnimationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendAnimation != nil && mm_atomic.LoadUint64(&m.afterSendAnimationCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendAnimationInspect logs each unmet expectation
func (m *TelegramBotAPIMock) MinimockSendAnimationInspect() {
	for _, e := range m.SendAnimationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TelegramBotAPIMock.SendAnimation with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendAnimationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendAnimationCounter) < 1 {
		if m.SendAnimationMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TelegramBotAPIMock.SendAnimation")
		} else {
			m.t.Errorf("Expected call to TelegramBotAPIMock.SendAnimation with params: %#v", *m.SendAnimationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendAnimation != nil && mm_atomic.LoadUint64(&m.afterSendAnimationCounter) < 1 {
		m.t.Error("Expected call to TelegramBotAPIMock.SendAnimation")
	}
}

type mTelegramBotAPIMockSendMessage struct {
	mock               *TelegramBotAPIMock
	defaultExpectation *TelegramBotAPIMockSendMessageExpectation
	expectations       []*TelegramBotAPIMockSendMessageExpectation

	callArgs []*TelegramBotAPIMockSendMessageParams
	mutex    sync.RWMutex
}

// TelegramBotAPIMockSendMessageExpectation specifies expectation struct of the telegramBotAPI.SendMessage
type TelegramBotAPIMockSendMessageExpectation struct {
	mock    *TelegramBotAPIMock
	params  *TelegramBotAPIMockSendMessageParams
	results *TelegramBotAPIMockSendMessageResults
	Counter uint64
}

// TelegramBotAPIMockSendMessageParams contains parameters of the telegramBotAPI.SendMessage
type TelegramBotAPIMockSendMessageParams struct {
	chatID int64
	text   string
}

// TelegramBotAPIMockSendMessageResults contains results of the telegramBotAPI.SendMessage
type TelegramBotAPIMockSendMessageResults struct {
	i1  int
	err error
}

// Expect sets up expected params for telegramBotAPI.SendMessage
func (mmSendMessage *mTelegramBotAPIMockSendMessage) Expect(chatID int64, text string) *mTelegramBotAPIMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("TelegramBotAPIMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &TelegramBotAPIMockSendMessageExpectation{}
	}

	mmSendMessage.defaultExpectation.params = &TelegramBotAPIMockSendMessageParams{chatID, text}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the telegramBotAPI.SendMessage
func (mmSendMessage *mTelegramBotAPIMockSendMessage) Inspect(f func(chatID int64, text string)) *mTelegramBotAPIMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for TelegramBotAPIMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by telegramBotAPI.SendMessage
func (mmSendMessage *mTelegramBotAPIMockSendMessage) Return(i1 int, err error) *TelegramBotAPIMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("TelegramBotAPIMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &TelegramBotAPIMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &TelegramBotAPIMockSendMessageResults{i1, err}
	return mmSendMessage.mock
}

//Set uses given function f to mock the telegramBotAPI.SendMessage method
func (mmSendMessage *mTelegramBotAPIMockSendMessage) Set(f func(chatID int64, text string) (i1 int, err error)) *TelegramBotAPIMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the telegramBotAPI.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the telegramBotAPI.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// When sets expectation for the telegramBotAPI.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mTelegramBotAPIMockSendMessage) When(chatID int64, text string) *TelegramBotAPIMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("TelegramBotAPIMock.SendMessage mock is already set by Set")
	}

	expectation := &TelegramBotAPIMockSendMessageExpectation{
		mock:   mmSendMessage.mock,
		params: &TelegramBotAPIMockSendMessageParams{chatID, text},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up telegramBotAPI.SendMessage return parameters for the expectation previously defined by the When method
func (e *TelegramBotAPIMockSendMessageExpectation) Then(i1 int, err error) *TelegramBotAPIMock {
	e.results = &TelegramBotAPIMockSendMessageResults{i1, err}
	return e.mock
}

// SendMessage implements telegramBotAPI
func (mmSendMessage *TelegramBotAPIMock) SendMessage(chatID int64, text string) (i1 int, err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(chatID, text)
	}

	mm_params := &TelegramBotAPIMockSendMessageParams{chatID, text}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_got := TelegramBotAPIMockSendMessageParams{chatID, text}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("TelegramBotAPIMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the TelegramBotAPIMock.SendMessage")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(chatID, text)
	}
	mmSendMessage.t.Fatalf("Unexpected call to TelegramBotAPIMock.SendMessage. %v %v", chatID, text)
	return
}

// SendMessageAfterCounter returns a count of finished TelegramBotAPIMock.SendMessage invocations
func (mmSendMessage *TelegramBotAPIMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of TelegramBotAPIMock.SendMessage invocations
func (mmSendMessage *TelegramBotAPIMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to TelegramBotAPIMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mTelegramBotAPIMockSendMessage) Calls() []*TelegramBotAPIMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*TelegramBotAPIMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *TelegramBotAPIMock) MinimockSendMessageDone() bool {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *TelegramBotAPIMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TelegramBotAPIMock.SendMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TelegramBotAPIMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to TelegramBotAPIMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		m.t.Error("Expected call to TelegramBotAPIMock.SendMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TelegramBotAPIMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockEditMessageInspect()

		m.MinimockGetChatPinnedMessageIDInspect()

		m.MinimockGetUpdatesInspect()

		m.MinimockPinMessageInspect()

		m.MinimockSendAnimationInspect()

		m.MinimockSendMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TelegramBotAPIMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TelegramBotAPIMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockEditMessageDone() &&
		m.MinimockGetChatPinnedMessageIDDone() &&
		m.MinimockGetUpdatesDone() &&
		m.MinimockPinMessageDone() &&
		m.MinimockSendAnimationDone() &&
		m.MinimockSendMessageDone()
}
